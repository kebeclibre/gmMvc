package lcs.prs.goingmobile.entities;
// Generated Aug 19, 2016 11:55:51 AM by Hibernate Tools 5.1.0.Beta1

import java.util.Date;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Journeys generated by hbm2java
 */
@Entity
@Table(name = "journeys", catalog = "goingmobile")
public class Journey implements java.io.Serializable, Comparable<Journey> {

	private Integer id;
	private Client clients;
	private String journeyName;
	private String rawData;
	private float kilometers;
	private double gmPoints;
	private float cycledProbability;
	private Date addedDate;
	private boolean isActive;
	private boolean isPublic;
	private double avgSpeed;

	public double getAvgSpeed() {
		return avgSpeed;
	}

	public void setAvgSpeed(double avgSpeed) {
		this.avgSpeed = avgSpeed;
	}

	public Journey() {
	}

	public Journey(Client clients, String journeyName, String rawData, float kilometers, double gmPoints,
			float cycledProbability, Date addedDate, boolean isActive, boolean isPublic) {
		this.clients = clients;
		this.journeyName = journeyName;
		this.rawData = rawData;
		this.kilometers = kilometers;
		this.gmPoints = gmPoints;
		this.cycledProbability = cycledProbability;
		this.addedDate = addedDate;
		this.isActive = isActive;
		this.isPublic = isPublic;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((addedDate == null) ? 0 : addedDate.hashCode());
		long temp;
		temp = Double.doubleToLongBits(avgSpeed);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		result = prime * result + Float.floatToIntBits(cycledProbability);
		temp = Double.doubleToLongBits(gmPoints);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		result = prime * result + (isActive ? 1231 : 1237);
		result = prime * result + (isPublic ? 1231 : 1237);
		result = prime * result + ((journeyName == null) ? 0 : journeyName.hashCode());
		result = prime * result + Float.floatToIntBits(kilometers);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Journey other = (Journey) obj;
		if (addedDate == null) {
			if (other.addedDate != null)
				return false;
		} else if (!addedDate.equals(other.addedDate))
			return false;
		if (Double.doubleToLongBits(avgSpeed) != Double.doubleToLongBits(other.avgSpeed))
			return false;
		if (Float.floatToIntBits(cycledProbability) != Float.floatToIntBits(other.cycledProbability))
			return false;
		if (Double.doubleToLongBits(gmPoints) != Double.doubleToLongBits(other.gmPoints))
			return false;
		if (isActive != other.isActive)
			return false;
		if (isPublic != other.isPublic)
			return false;
		if (journeyName == null) {
			if (other.journeyName != null)
				return false;
		} else if (!journeyName.equals(other.journeyName))
			return false;
		if (Float.floatToIntBits(kilometers) != Float.floatToIntBits(other.kilometers))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Journey [id=" + id + ", clients=" + clients + ", journeyName=" + journeyName + ", rawData=" + rawData
				+ ", kilometers=" + kilometers + ", gmPoints=" + gmPoints + ", cycledProbability=" + cycledProbability
				+ ", addedDate=" + addedDate + ", isActive=" + isActive + ", isPublic=" + isPublic + ", avgSpeed="
				+ avgSpeed + "]";
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Client_Id", nullable = false)
	public Client getClients() {
		return this.clients;
	}

	public void setClients(Client clients) {
		this.clients = clients;
	}

	@Column(name = "journeyName", nullable = false, length = 45)
	public String getJourneyName() {
		return this.journeyName;
	}

	public void setJourneyName(String journeyName) {
		this.journeyName = journeyName;
	}

	@Column(name = "rawData", nullable = false)
	public String getRawData() {
		return this.rawData;
	}

	public void setRawData(String rawData) {
		this.rawData = rawData;
	}

	@Column(name = "kilometers", nullable = false, precision = 12, scale = 0)
	public float getKilometers() {
		return this.kilometers;
	}

	public void setKilometers(float kilometers) {
		this.kilometers = kilometers;
	}

	@Column(name = "gmPoints", nullable = false, precision = 22, scale = 0)
	public double getGmPoints() {
		return this.gmPoints;
	}

	public void setGmPoints(double gmPoints) {
		this.gmPoints = gmPoints;
	}

	@Column(name = "CycledProbability", nullable = false, precision = 12, scale = 0)
	public float getCycledProbability() {
		return this.cycledProbability;
	}

	public void setCycledProbability(float cycledProbability) {
		this.cycledProbability = cycledProbability;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "addedDate", nullable = false, length = 10)
	public Date getAddedDate() {
		return this.addedDate;
	}

	public void setAddedDate(Date addedDate) {
		this.addedDate = addedDate;
	}

	@Column(name = "isActive", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@Column(name = "isPublic", nullable = false)
	public boolean isIsPublic() {
		return this.isPublic;
	}

	public void setIsPublic(boolean isPublic) {
		this.isPublic = isPublic;
	}

	@Override
	public int compareTo(Journey o) {
		if (o.getAddedDate().equals(this.getAddedDate())) {
			return (int) (o.getKilometers() - this.getKilometers());
		}
		return o.getAddedDate().compareTo(this.getAddedDate());
	}

}
